name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  backend-tests:
    name: Backend Tests
    uses: ./.github/workflows/backend-tests.yml
    secrets: inherit

  frontend-tests:
    name: Frontend Tests
    uses: ./.github/workflows/frontend-tests.yml
    secrets: inherit

  code-quality:
    name: Code Quality
    uses: ./.github/workflows/code-quality.yml
    secrets: inherit
    permissions:
      actions: read
      contents: read
      security-events: write

  e2e-tests:
    name: E2E Tests
    needs: [backend-tests, frontend-tests]
    if: github.event_name != 'schedule' || (github.event_name == 'schedule' && github.ref == 'refs/heads/main')
    uses: ./.github/workflows/e2e-tests.yml
    secrets: inherit

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Deploy to Vercel Production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          npm install -g vercel@latest
          vercel deploy --prod --token="$VERCEL_TOKEN"
          echo "âœ… Deployed to production"

  preview-deployment:
    name: Preview Deployment
    uses: ./.github/workflows/deploy-preview.yml
    if: github.event_name == 'pull_request'
    secrets: inherit

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality, e2e-tests, deploy-staging, preview-deployment]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Staging Deployment: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Preview Deployment: ${{ needs.preview-deployment.result }}" >> $GITHUB_STEP_SUMMARY