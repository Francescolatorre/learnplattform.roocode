name: Code Quality

on:
  workflow_call:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript,python"

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Install Node dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Check Python dependencies for vulnerabilities
        working-directory: ./backend
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Bandit security linter
        working-directory: ./backend
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --skip B101

      - name: Audit Node dependencies
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json

  lint-all:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python linting tools
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy django-stubs

      - name: Install Node dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint Python code
        working-directory: ./backend
        run: |
          echo "::group::Black formatting check"
          black --check --diff . || echo "::error::Code formatting issues found"
          echo "::endgroup::"
          
          echo "::group::Import sorting check"
          isort --check-only --diff . || echo "::error::Import sorting issues found"
          echo "::endgroup::"
          
          echo "::group::Flake8 linting"
          flake8 . || echo "::error::Linting issues found"
          echo "::endgroup::"
          
          echo "::group::MyPy type checking"
          mypy . --ignore-missing-imports || echo "::warning::Type checking issues found"
          echo "::endgroup::"

      - name: Lint TypeScript/JavaScript
        working-directory: ./frontend
        run: |
          echo "::group::Prettier formatting check"
          npx prettier --check . || echo "::error::Formatting issues found"
          echo "::endgroup::"
          
          echo "::group::ESLint"
          npm run lint || echo "::error::Linting issues found"
          echo "::endgroup::"
          
          echo "::group::TypeScript compilation check"
          npx tsc --noEmit || echo "::error::TypeScript compilation issues found"
          echo "::endgroup::"

  performance-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm install -g @lhci/cli

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Run Lighthouse CI
        working-directory: ./frontend
        run: |
          npx serve -s dist -p 3000 &
          sleep 5
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse audit completed with issues"

      - name: Bundle size analysis
        working-directory: ./frontend
        run: |
          npx vite-bundle-analyzer dist/ --mode=static --report=bundle-report.html --open=false

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: |
            frontend/.lighthouseci/
            frontend/bundle-report.html

  documentation-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for required documentation files
        run: |
          echo "::group::Checking documentation files"
          files_to_check=("README.md" "memory_bank/Documentation/API.md" "memory_bank/Documentation/DATA_MODEL.md")
          
          for file in "${files_to_check[@]}"; do
            if [[ -f "$file" ]]; then
              echo "✅ $file exists"
            else
              echo "::error::❌ Required file $file is missing"
            fi
          done
          echo "::endgroup::"

      - name: Check for TODO/FIXME comments
        run: |
          echo "::group::Searching for TODO/FIXME comments"
          grep -r --include="*.py" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
            -i "todo\|fixme\|hack\|xxx" . || echo "No TODO/FIXME comments found"
          echo "::endgroup::"

      - name: Validate markdown files
        run: |
          echo "::group::Markdown validation"
          find . -name "*.md" -exec echo "Checking {}" \; -exec cat {} > /dev/null \; || echo "Markdown validation completed"
          echo "::endgroup::"