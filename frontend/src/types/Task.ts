// src/types/common/tasks.ts

import { IUser } from '@/types/userTypes';

/**
 * Aufgabenstatus-Typ
 */
export type TTaskStatus = 'not_started' | 'in_progress' | 'completed' | 'graded' | 'pending';

/**
 * Interface für Lernaufgaben (Learning Tasks)
 *
 * Represents a learning task within a course, matching the backend model.
 * This is the primary interface for student-facing assignments in the platform.
 */
export interface ILearningTask {
  readonly id: number; // Primary key
  course: number; // Foreign key to course
  title: string;
  description: string;
  description_html?: string; // Computed field from the backend
  order: number;
  created_at: string;
  updated_at: string;
  is_published: boolean;
}

/**
 * Interface für Aufgabenerstellungsdaten (Task Creation Data)
 *
 * Subset of ILearningTask for creating new tasks.
 * Only includes the fields that can be set during creation.
 */
export interface ITaskCreationData {
  readonly id?: number; // Optional during creation, will be generated by the server
  title: string;
  description: string;
  course: number;
  order?: number;
  is_published?: boolean;
}

/**
 * Interface for student's task progress
 *
 * Represents the progress of a student on a specific learning task.
 * Maps directly to the TaskProgress model in the backend.
 */
export interface IBaseTaskProgress {
  readonly id: number;
  user: number;
  task: number;
  status: TTaskStatus;
  time_spent: string | null;
  completion_date?: string | null;
  updated_at?: string;
  user_details?: IUser;
  task_details?: ILearningTask;
}

/**
 * Extended version of TaskProgress with UI-specific fields
 *
 * This interface extends the base progress model with additional
 * fields used in the frontend UI components.
 */
export interface ITaskProgress extends IBaseTaskProgress {
  // UI-specific fields that don't exist in the backend model
  title?: string;
  description?: string;
  timeSpent?: number | null; // Formatted version of time_spent
}

/**
 * Interface für Daten zur Aktualisierung des Aufgabenfortschritts
 */
export interface ITaskProgressUpdateData {
  status?: TTaskStatus;
  time_spent?: string | null;
  completion_date?: string | null;
}

/**
 * Interface für Aufgabeneinreichungsdaten
 */
export interface ITaskSubmissionData {
  content: string;
  attachments?: string[];
}

/**
 * Interface für Quiz-Verlauf
 */
export interface IQuizHistory {
  quizId: number;
  moduleId?: number;
  quizTitle: string;
  score: number;
  maxScore: number;
  attempts: number;
  maxAttempts: number;
  date: string;
  timeSpent: number;
  answers: Array<{
    questionId: string;
    correct: boolean;
    timeSpent: number;
  }>;
}

// Exportiere ITaskProgressBase für Abwärtskompatibilität
export type ITaskProgressBase = IBaseTaskProgress;
